local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local drops = workspace.DroppedParts
local tyc = nil
local remotewait = 0.1
local virtualuser = game:GetService("VirtualUser")

_G.waittime = 0.5
_G.oreboost = false
_G.autobox = false
_G.autorebirth = false
_G.autoremote = false
_G.antiafk = false

local baseteslas = {"All For One", "Voided Black Dwarf", "Black Dwarf", "Hyperspace", "Tesla Refuter", "Data Destroyer", "Tesla Resetter", "The Final Upgrader", "One For All", "Prismatic Genesis"}

for i, v in workspace.Tycoons:GetChildren() do
    if v.Owner.Value == game.Players.LocalPlayer.Name then
        tyc = v
    end
end

local Window = Rayfield:CreateWindow({
   Name = "Forlorn Hub",
   LoadingTitle = "Miners Haven",
   LoadingSubtitle = "by Forlornicus",
})

local main = Window:CreateTab("Main")
local layouts = Window:CreateTab("Layouts")
local misc = Window:CreateTab("Misc")
local misc = Window:CreateTab("Credits")

local Section1 = main:CreateSection("Many Things")
local Section2 = layouts:CreateSection("coming soon!")
local Section3 = misc:CreateSection("Client/Player Stuff")
local Section4 = credits:CreateSection("Credits")

local Label = layouts:CreateLabel("Coming Soon!")
local Label = layouts:CreateLabel("Coming Soon!")
local Label = layouts:CreateLabel("Coming Soon!")
local Label = layouts:CreateLabel("Coming Soon!")
local Label = layouts:CreateLabel("Coming Soon!")

local Label = credits:CreateLabel("Made By Forlornicus/ForlornW46")

function grabfurnace()
    for _, v in pairs(tyc:GetChildren()) do
        if v.ClassName == "Model" and not string.find(v.Name, "Teleport") then
            if v.Model:FindFirstChild("Lava") then
                return v.Name
            end
        end
    end
    return false
end

local function isTesla(upgName)
    for _, teslaName in ipairs(baseteslas) do
        if upgName == teslaName then
            return true
        end
    end
    return false
end

function upgrade(drop)
    drop.Transparency = 1
    drop.Anchored = false
    drop.CFrame = CFrame.new(tyc.Base.Position + Vector3.new(0, 40, 0))
    task.wait(0.1)
    drop.Anchored = true
    
    local usedTeslas = {}
    for _, teslaName in ipairs(baseteslas) do
        for _, upg in ipairs(tyc:GetChildren()) do
            if upg.Name == teslaName and not usedTeslas[teslaName] and upg:FindFirstChild("Model") and upg:FindFirstChild("Model"):FindFirstChild("Upgrade") then
                drop.Anchored = false
                drop.CFrame = upg.Model.Upgrade.CFrame
                task.wait(0.05)
                drop.Anchored = true
                usedTeslas[teslaName] = true
                break
            end
        end
    end
    
    for _, upg in ipairs(tyc:GetChildren()) do
        if not isTesla(upg.Name) and upg:FindFirstChild("Model") and upg:FindFirstChild("Model"):FindFirstChild("Upgrade") then
            drop.Anchored = false
            local upgrade = upg.Model.Upgrade
            drop.CFrame = upgrade.CFrame
            task.wait(0.05)
            drop.Anchored = true
        end
    end
    
    drop.Anchored = true
    task.wait(0.1)
    drop.CFrame = tyc[grabfurnace()]:FindFirstChild("Model").Lava.CFrame
    drop.Anchored = false
end

drops[tyc.Name].ChildAdded:Connect(function(child)
    if _G.oreboost then
        upgrade(child)
    end
end)

local function createDuplicates()
    for _, upg in ipairs(tyc:GetChildren()) do
        if not isTesla(upg.Name) and upg:FindFirstChild("Model") and upg:FindFirstChild("Model"):FindFirstChild("Upgrade") then
            if not upg.Model.Upgrade:FindFirstChild("Cloned") then
                print(upg)
                local decoy = upg.Model.Upgrade:Clone()
                decoy.Parent = upg.Model
                decoy.Name = "UpgradeDecoy"
                local tag = Instance.new("StringValue", upg.Model.Upgrade)
                tag.Name = "Cloned"
                upg.Model.Upgrade.Transparency = 1
                upg.Model.Upgrade.Size = Vector3.new(5, 5, 5)
                upg.Model.Upgrade.CFrame = CFrame.new(tyc.Base.Position + Vector3.new(0, 40, 0))
            end
        end
    end
end

function notify(text)
    Rayfield:Notify({
        Title = "Forlorn Hub",
        Content = text,
        Duration = 3,
        Actions = {
            Ignore = {
             Name = "Okay!",
             Callback = function()
            end
        },
    },
})
end

spawn(function()
    while wait(1) do
        if _G.oreboost then
            if tyc then
                createDuplicates()
            end
            wait(1)
        end
    end
end)

local walkspeed = misc:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 240},
   Increment = 1,
   Suffix = "WS",
   CurrentValue = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed,
   Flag = "Slider1",
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
   end,
})

local walkspeed = misc:CreateSlider({
   Name = "JumpPower",
   Range = {0, 240},
   Increment = 1,
   Suffix = "JP",
   CurrentValue = game.Players.LocalPlayer.Character.Humanoid.JumpPower,
   Flag = "Slider1",
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
   end,
})

local walkspeed = misc:CreateSlider({
   Name = "FOV",
   Range = {0, 240},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = workspace.CurrentCamera.FieldOfView,
   Flag = "Slider1",
   Callback = function(Value)
        workspace.CurrentCamera.FieldOfView = Value
   end,
})

local Slider = main:CreateSlider({
   Name = "Conveyor Speed Multi",
   Range = {0, 10},
   Increment = 0.05,
   Suffix = "multi",
   CurrentValue = 1,
   Flag = "Slider1",
   Callback = function(Value)
        tyc.AdjustSpeed.Value = Value
   end,
})

local Slider = main:CreateSlider({
   Name = "Box Grab Wait Time",
   Range = {0, 5},
   Increment = 0.1,
   Suffix = "sec",
   CurrentValue = 0.5,
   Flag = "Slider1",
   Callback = function(Value)
        _G.waittime = Value
   end,
})

local Button = main:CreateButton({
   Name = "Grab Boxes",
   Callback = function()
        for i,v in pairs(workspace.Boxes:GetChildren()) do
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position)
            task.wait(_G.waittime)
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(tyc.Base.Position + Vector3.new(0,3.5,0))
   end,
})

spawn(function()
    while task.wait(0.1) do
        if _G.autobox then
        for i,v in pairs(workspace.Boxes:GetChildren()) do
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position)
            task.wait(_G.waittime)
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(tyc.Base.Position + Vector3.new(0,3.5,0))
        end
    end
end)

spawn(function()
    while task.wait(1) do
        if _G.autorebirth then
            game.ReplicatedStorage.Rebirth:InvokeServer()
        end
    end
end)

local boxes = main:CreateToggle({
   Name = "Auto Grab Boxes",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        _G.autobox = not _G.autobox
   end,
})

local orebtoggle = main:CreateToggle({
   Name = "Ore Boost",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        if tyc and grabfurnace() then
            _G.oreboost = not _G.oreboost
            if _G.oreboost == true then
                notify("OreBoost Enabled Successfully!, Using " .. grabfurnace())
            else
                notify("OreBoost Successfully Disabled!")
            end
        else
            _G.oreboost = false
            notify("Please Place Down A Furnace And A Mine, then retoggle oreboost!")
        end
   end,
})

local boxes = main:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        _G.autorebirth = not _G.autorebirth
   end,
})

spawn(function()
    while task.wait(remotewait) do
        if _G.autoremote then
            game.ReplicatedStorage.RemoteDrop:FireServer()
        end
    end
end)

local Slider = main:CreateSlider({
   Name = "Remote Mine Wait Time",
   Range = {0, 10},
   Increment = 0.1,
   Suffix = "sec",
   CurrentValue = 0.1,
   Flag = "Slider1",
   Callback = function(Value)
        remotewait = Value
   end,
})

local remote = main:CreateToggle({
   Name = "Auto Remote Mine",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        _G.autoremote = not _G.autoremote
   end,
})

local remote = misc:CreateToggle({
   Name = "Anti-AFK",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        _G.antiafk = not _G.antiafk
        if _G.antiafk then
            notify("Anti-AFK Enabled!")
        else
            notify("Anti-AFK Disabled!")
        end
   end,
})

game.Players.LocalPlayer.Idled:connect(function()
    if _G.antiafk then
        virtualuser:CaptureController()
        virtualuser:ClickButton2(Vector2.new())
    end
end)
